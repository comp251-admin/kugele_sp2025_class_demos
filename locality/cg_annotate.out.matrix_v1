--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         23068672 B, 64 B, 11-way associative
Command:          ./matrix_v1
Data file:        cachegrind.out.matrix_v1
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     I1mr           ILmr           Dr                     D1mr                DLmr                Dw                   D1mw                DLmw                
--------------------------------------------------------------------------------
3,200,284,083 (100.0%) 1,457 (100.0%) 1,451 (100.0%) 1,200,094,242 (100.0%) 12,501,665 (100.0%) 12,501,417 (100.0%) 200,034,061 (100.0%) 12,500,658 (100.0%) 12,500,618 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                     I1mr        ILmr        Dr                   D1mr                DLmr                Dw                   D1mw                DLmw                 file:function
--------------------------------------------------------------------------------
1,700,070,064 (53.12%)  7 ( 0.48%)  7 ( 0.48%) 600,030,017 (50.00%)          2 ( 0.00%)          2 ( 0.00%) 100,010,012 (50.00%) 12,500,000 (99.99%) 12,500,000 (100.0%)  /home/kugeles/courses/comp251/demos/locality/matrix_v1.c:main
1,500,070,016 (46.87%)  1 ( 0.07%)  1 ( 0.07%) 600,030,005 (50.00%) 12,500,002 (99.99%) 12,500,002 (99.99%) 100,010,003 (50.00%)          1 ( 0.00%)          1 ( 0.00%)  /home/kugeles/courses/comp251/demos/locality/matrix_v1.c:avg

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/kugeles/courses/comp251/demos/locality/matrix_v1.c
--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                   D1mr                DLmr                Dw                   D1mw                DLmw                

            .          .          .                    .                   .                   .                    .                   .                   .           #include <stdio.h>
            .          .          .                    .                   .                   .                    .                   .                   .           #include <time.h>
            .          .          .                    .                   .                   .                    .                   .                   .           
            .          .          .                    .                   .                   .                    .                   .                   .           #define N 10000
            .          .          .                    .                   .                   .                    .                   .                   .           double m[N][N];
            .          .          .                    .                   .                   .                    .                   .                   .           
            3 ( 0.00%) 0          0                    0                   0                   0                    1 ( 0.00%)          0                   0           double avg(void) {
            2 ( 0.00%) 0          0                    0                   0                   0                    1 ( 0.00%)          1 ( 0.00%)          1 ( 0.00%)    double total = 0.0;
            .          .          .                    .                   .                   .                    .                   .                   .           
       30,004 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)      20,001 ( 0.00%)          0                   0                    1 ( 0.00%)          0                   0             for (int i = 0; i < N; i++) {
  300,040,000 ( 9.38%) 0          0          200,010,000 (16.67%)          0                   0               10,000 ( 0.00%)          0                   0               for (int j = 0; j < N; j++) {
1,200,000,000 (37.50%) 0          0          400,000,000 (33.33%) 12,500,000 (99.99%) 12,500,000 (99.99%) 100,000,000 (49.99%)          0                   0                 total += m[i][j];
            .          .          .                    .                   .                   .                    .                   .                   .               }
            .          .          .                    .                   .                   .                    .                   .                   .             }
            .          .          .                    .                   .                   .                    .                   .                   .           
            4 ( 0.00%) 0          0                    2 ( 0.00%)          1 ( 0.00%)          1 ( 0.00%)           0                   0                   0             return total / (N * N);
            3 ( 0.00%) 0          0                    2 ( 0.00%)          1 ( 0.00%)          1 ( 0.00%)           0                   0                   0           }
            .          .          .                    .                   .                   .                    .                   .                   .           
            9 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)           1 ( 0.00%)          0                   0                    4 ( 0.00%)          0                   0           int main(int argc, char **argv) {
            .          .          .                    .                   .                   .                    .                   .                   .             struct timespec ts1, ts2;
            .          .          .                    .                   .                   .                    .                   .                   .             double start, now, ret;
            .          .          .                    .                   .                   .                    .                   .                   .           
       30,004 ( 0.00%) 2 ( 0.14%) 2 ( 0.14%)      20,001 ( 0.00%)          0                   0                    1 ( 0.00%)          0                   0             for (int i = 0; i < N; i++) {
  300,040,000 ( 9.38%) 0          0          200,010,000 (16.67%)          0                   0               10,000 ( 0.00%)          0                   0               for (int j = 0; j < N; j++) {
1,400,000,000 (43.75%) 0          0          400,000,000 (33.33%)          0                   0          100,000,000 (49.99%) 12,500,000 (99.99%) 12,500,000 (100.0%)        m[i][j] = i + j;
            .          .          .                    .                   .                   .                    .                   .                   .               }
            .          .          .                    .                   .                   .                    .                   .                   .             }
            .          .          .                    .                   .                   .                    .                   .                   .           
            4 ( 0.00%) 0          0                    0                   0                   0                    1 ( 0.00%)          0                   0             clock_gettime(CLOCK_MONOTONIC, &ts1);
            .          .          .                    .                   .                   .                    .                   .                   .           
            3 ( 0.00%) 0          0                    0                   0                   0                    2 ( 0.00%)          0                   0             ret = avg();
            .          .          .                    .                   .                   .                    .                   .                   .           
            4 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)           0                   0                   0                    1 ( 0.00%)          0                   0             clock_gettime(CLOCK_MONOTONIC, &ts2);
            .          .          .                    .                   .                   .                    .                   .                   .           
            .          .          .                    .                   .                   .                    .                   .                   .             // convert to milliseconds
           12 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)           4 ( 0.00%)          2 ( 0.00%)          2 ( 0.00%)           1 ( 0.00%)          0                   0             start = (1000.0 * ts1.tv_sec) + (ts1.tv_nsec / 1000000.0);
           12 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)           4 ( 0.00%)          0                   0                    1 ( 0.00%)          0                   0             now = (1000.0 * ts2.tv_sec) + (ts2.tv_nsec / 1000000.0);
            .          .          .                    .                   .                   .                    .                   .                   .           
           10 ( 0.00%) 0          0                    3 ( 0.00%)          0                   0                    1 ( 0.00%)          0                   0             printf("ij average time: %7.4f ms (average: %7.4f)\n", now - start, ret);
            .          .          .                    .                   .                   .                    .                   .                   .           
            1 ( 0.00%) 0          0                    0                   0                   0                    0                   0                   0             return 0;
            5 ( 0.00%) 1 ( 0.07%) 1 ( 0.07%)           4 ( 0.00%)          0                   0                    0                   0                   0           }

--------------------------------------------------------------------------------
Ir                     I1mr       ILmr       Dr                     D1mr                DLmr                Dw                   D1mw                DLmw                
--------------------------------------------------------------------------------
3,200,140,080 (100.0%) 8 ( 0.55%) 8 ( 0.55%) 1,200,060,022 (100.0%) 12,500,004 (99.99%) 12,500,004 (99.99%) 200,020,015 (99.99%) 12,500,001 (99.99%) 12,500,001 (100.0%)  events annotated

